{"version":3,"sources":["components/Button/Button.js","components/Button/index.js","utils/helpers.js","hooks/useCountdownTimer.js","store/game/gameTypes.js","store/player/playerTypes.js","components/GameInfo/GameInfo.js","components/GameInfo/index.js","components/Leaderboard/Leaderboard.js","components/Leaderboard/index.js","components/Loader/Loader.js","utils/gameCardImages.js","assets/img/card-images/android.svg","assets/img/card-images/acer.svg","assets/img/card-images/apple.svg","assets/img/card-images/beats.svg","assets/img/card-images/hp.svg","assets/img/card-images/lenovo.svg","assets/img/card-images/nokia.svg","assets/img/card-images/intel.svg","assets/img/card-images/dell.svg","assets/img/card-images/cisco.svg","assets/img/card-images/htc.svg","components/GameCard/GameCard.js","components/GameCard/index.js","store/cards/cardsTypes.js","components/Playground/Playground.js","components/Playground/index.js","store/cards/cardsActions.js","pages/Gamepage/Gamepage.js","pages/Gamepage/index.js","utils/gameLevelData.js","assets/img/gamemode-images/easy.svg","assets/img/gamemode-images/medium.svg","assets/img/gamemode-images/hard.svg","components/GameLevelCard/GameLevelCard.js","components/GameLevelCard/index.js","store/gamemode/gamemodeTypes.js","pages/Homepage/Homepage.js","pages/Homepage/index.js","App.js","store/leaderboard/leaderboardTypes.js","store/leaderboard/leaderboardReducer.js","store/gamemode/gamemodeReducer.js","store/cards/cardsReducer.js","store/player/playerReducer.js","store/game/gameReducer.js","store/rootReducer.js","store/index.js","index.js"],"names":["Button","children","clickHandler","variant","isCheckbox","checked","type","className","onClick","formatGameTime","min","sec","getMinutesFromMs","ms","Date","getMinutes","getSecondsFromMs","getSeconds","getMillisecondsFromGameTime","time","setTime","valueOf","useCountdownTimer","interval","timerRef","useRef","useState","isOver","setIsOver","isTimeIsZero","setTimeIsZero","isReset","setIsReset","isPlaying","setIsPlaying","initialValue","setInitialValue","leftTime","setLeftTime","paused","finished","callbacks","useEffect","restart","newTime","startTimer","useCallback","current","beforeStart","setInterval","console","log","stopTimer","clearInterval","resetTimer","start","pause","stop","START_GAME","PAUSE_GAME","END_GAME","SET_TIME_GAME","SET_NICK_PLAYER","SET_TIME_PLAYER","CLEAR_TIME_PLAYER","GAME_TIME","GameInfo","player","useSelector","state","game","gameTime","setGameTime","dispatch","useDispatch","payload","nickname","Leaderboard","inGame","leaderboard","tableScroll","returnGameTime","returnSortedArr","copiedLeaders","list","push","id","sort","a","b","containerHeight","clientHeight","playerBlock","querySelector","playerHeight","playerPosTop","offsetTop","containerheight","isPlayerPositionOnEndOfBlock","scrollTo","ref","map","Loader","percent","setPercent","fullTime","style","width","gameCardImages","android","acer","apple","beats","hp","lenovo","nokia","intel","dell","cisco","htc","GameCard","card","index","isFlipped","name","backgroundImage","PUSH_DATA_CARDS","ADD_TO_COMPARE_CARDS","FLIP_CARD","Playground","level","cards","grid","target","closest","cardId","split","arr","copiedArr","addEventListener","removeEventListener","Gamepage","gamemode","isPlay","setPlay","gameLevelData","easy","img","layout","remeberTime","medium","hard","GameLevelCard","active","onActive","cardData","setCardData","src","alt","GAMEMODE_CHANGE","Homepage","selectLevel","leaders","App","basename","process","exact","path","LOADING_LEADERBOARD","LOADED_LEADERBOARD","ERROR_LEADERBOARD","CLEAR_ERROR_LEADERBOARD","PUSH_DATA_LEADERBOARD","initialState","Array","e","i","isLoading","isLoaded","isError","errorMessage","leaderboardReducer","action","gamemodeReducer","compare","el","cardsReducer","playerReducer","isPause","isGameOver","gameReducer","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acce06ac.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.scss';\n\nfunction Button({\n  children, clickHandler, variant, isCheckbox, checked, type,\n}) {\n  return (\n    <button\n      className={`button button__${variant}`}\n      type={type ? 'submit' : 'button'}\n      onClick={clickHandler}\n    >\n      {isCheckbox && (\n        <div className=\"button__box\">\n          <div className={`button__checkbox ${checked ? 'active' : ''}`} />\n          {children}\n        </div>\n      )}\n      {!isCheckbox && children}\n    </button>\n  );\n}\n\nexport default Button;\n","import Button from './Button';\n\nexport default Button;\n","const formatGameTime = (min, sec) => `${min < 10 ? '0' : ''}${min}:${sec < 10 ? '0' : ''}${sec}`;\n\nconst getMinutesFromMs = (ms) => new Date(ms).getMinutes();\nconst getSecondsFromMs = (ms) => new Date(ms).getSeconds();\n\nconst getMillisecondsFromGameTime = (min, sec) => {\n  const time = new Date();\n\n  time.setTime((sec * 1000) + (min * 1000 * 60));\n\n  return time.valueOf();\n};\n\nconst isPlayerPositionOnEndOfBlock = (playerBlock, containerheight) => {\n  const { clientHeight, offsetTop } = playerBlock;\n\n  return (offsetTop + clientHeight) > containerheight;\n};\n\nexport {\n  formatGameTime,\n  getMillisecondsFromGameTime,\n  getMinutesFromMs,\n  getSecondsFromMs,\n  isPlayerPositionOnEndOfBlock,\n};\n","import {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { getMillisecondsFromGameTime } from '../utils/helpers';\n\nconst useCountdownTimer = ([min, sec], interval) => {\n  const timerRef = useRef(null);\n  const [isOver, setIsOver] = useState(false);\n  const [isTimeIsZero, setTimeIsZero] = useState(false);\n  const [isReset, setIsReset] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [initialValue, setInitialValue] = useState(getMillisecondsFromGameTime(min, sec));\n  const [leftTime, setLeftTime] = useState(initialValue);\n  const [callbacks] = useState({\n    paused: null, finished: null,\n  });\n\n  useEffect(() => {\n    setTimeIsZero(leftTime === 0);\n  }, [leftTime]);\n\n  const start = () => {\n    setIsOver(false);\n    setIsPlaying(true);\n  };\n  const restart = (newTime) => {\n    setIsPlaying(false);\n    setIsOver(true);\n\n    if (!newTime) return;\n\n    setInitialValue(getMillisecondsFromGameTime(newTime[0], newTime[1]));\n    setIsReset(true);\n  };\n  const pause = () => setIsPlaying(false);\n  const stop = () => setIsOver(true);\n\n  const startTimer = useCallback(() => {\n    if (timerRef.current) return;\n    if (callbacks.beforeStart) callbacks.beforeStart();\n\n    timerRef.current = setInterval(() => {\n      setLeftTime((time) => {\n        console.log('tick');\n        if (time === 0) {\n          restart();\n          return 0;\n        }\n\n        return time - 1000;\n      });\n    }, interval);\n  }, [interval, callbacks]);\n\n  const stopTimer = useCallback(() => {\n    if (!timerRef.current) return;\n\n    clearInterval(timerRef.current);\n    timerRef.current = null;\n    setIsPlaying(false);\n\n    if (!isOver && callbacks.paused && !isTimeIsZero) callbacks.paused();\n  }, [callbacks, isOver, isTimeIsZero]);\n\n  const resetTimer = useCallback(() => {\n    setLeftTime(initialValue);\n  }, [initialValue]);\n\n  useEffect(() => {\n    if (isReset) {\n      resetTimer();\n      setIsReset(false);\n    }\n\n    if (isOver) {\n      stopTimer();\n      if (callbacks.finished && isTimeIsZero) callbacks.finished();\n      return;\n    }\n\n    if (isPlaying) startTimer();\n    else stopTimer();\n\n    // return () => stopTimer();\n  }, [\n    isOver,\n    isReset,\n    isPlaying,\n    startTimer,\n    resetTimer,\n    callbacks,\n    stopTimer,\n    isTimeIsZero,\n  ]);\n\n  return {\n    start,\n    pause,\n    stop,\n    restart,\n    leftTime,\n    callbacks,\n  };\n};\n\nexport default useCountdownTimer;\n","export const START_GAME = 'game/start';\nexport const PAUSE_GAME = 'game/pause';\nexport const END_GAME = 'game/gameOver';\nexport const SET_TIME_GAME = 'game/setTime';\n","export const SET_NICK_PLAYER = 'player/setNickname';\nexport const SET_TIME_PLAYER = 'player/setTime';\nexport const CLEAR_TIME_PLAYER = 'player/clearScore';\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useCountdownTimer from '../../hooks/useCountdownTimer';\nimport { SET_TIME_GAME, PAUSE_GAME } from '../../store/game/gameTypes';\nimport { SET_TIME_PLAYER } from '../../store/player/playerTypes';\nimport {\n  formatGameTime,\n  getMinutesFromMs,\n  getSecondsFromMs,\n  getMillisecondsFromGameTime,\n} from '../../utils/helpers';\n\nconst GAME_TIME = [2, 20];\n\nfunction GameInfo() {\n  const player = useSelector((state) => state.player);\n  const game = useSelector((state) => state.game);\n  const [gameTime, setGameTime] = useState('--:--');\n\n  const dispatch = useDispatch();\n  const {\n    start,\n    // stop,\n    pause,\n    // restart,\n    leftTime,\n    callbacks,\n  } = useCountdownTimer(GAME_TIME, 1000);\n\n  useEffect(() => {\n    callbacks.finished = () => {\n      console.log('finished');\n      if (leftTime === 0) dispatch({ type: PAUSE_GAME });\n    };\n    callbacks.paused = () => {\n      console.log('paused');\n    };\n\n    if (game.isPlaying) {\n      start();\n    } else pause();\n  }, [start, pause, callbacks, game.isPlaying, leftTime, dispatch]);\n\n  useEffect(() => {\n    dispatch({\n      type: SET_TIME_GAME,\n      payload: leftTime,\n    });\n\n    dispatch({\n      type: SET_TIME_PLAYER,\n      payload: getMillisecondsFromGameTime(...GAME_TIME) - leftTime,\n    });\n  }, [leftTime, dispatch]);\n\n  useEffect(() => {\n    const min = getMinutesFromMs(game.time);\n    const sec = getSecondsFromMs(game.time);\n\n    setGameTime(formatGameTime(min, sec));\n  }, [game]);\n\n  return (\n    <div className=\"game__info\">\n      <span className=\"game__nickname\">{player.nickname ?? '...'}</span>\n      <span className=\"game__time\">{gameTime}</span>\n    </div>\n  );\n}\n\nexport default GameInfo;\n","import GameInfo from './GameInfo';\n\nexport default GameInfo;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport './Leaderboard.scss';\nimport {\n  formatGameTime,\n  getMinutesFromMs,\n  getSecondsFromMs,\n  isPlayerPositionOnEndOfBlock,\n} from '../../utils/helpers';\n\nfunction Leaderboard({ inGame }) {\n  const leaderboard = useSelector((state) => state.leaderboard);\n  const player = useSelector((state) => state.player);\n  const tableScroll = useRef(null);\n\n  const returnGameTime = useCallback((ms) => {\n    const min = getMinutesFromMs(ms);\n    const sec = getSecondsFromMs(ms);\n\n    return formatGameTime(min, sec);\n  }, []);\n\n  const returnSortedArr = useCallback(() => {\n    const copiedLeaders = [...leaderboard.list];\n\n    if (inGame) {\n      copiedLeaders.push({\n        id: 'player',\n        nickname: player.nickname,\n        time: player.time,\n      });\n    }\n\n    return copiedLeaders.sort((a, b) => a.time - b.time);\n  }, [leaderboard.list, inGame, player]);\n\n  useEffect(() => {\n    if (!inGame && player.time < 1) return;\n\n    const containerHeight = tableScroll.current.clientHeight;\n    const playerBlock = tableScroll.current.querySelector('.leaderboard__row_player');\n    const playerHeight = playerBlock.clientHeight;\n    const playerPosTop = playerBlock.offsetTop;\n    if (isPlayerPositionOnEndOfBlock(playerBlock, containerHeight - playerHeight)) {\n      tableScroll.current.scrollTo(\n        0,\n        playerPosTop - containerHeight + playerHeight * 2,\n      );\n    }\n  }, [inGame, player]);\n\n  return (\n    <div className=\"leaderboard\">\n      <div className=\"leaderboard__head\">\n        <div className=\"leaderboard__row\">\n          <div className=\"leaderboard__col leaderboard__col_header\">\n            №\n          </div>\n          <div className=\"leaderboard__col leaderboard__col_header\">Nickname</div>\n          <div className=\"leaderboard__col leaderboard__col_header leaderboard__col_text_right\">\n            Time\n          </div>\n        </div>\n      </div>\n      <div ref={tableScroll} className={`leaderboard__body ${inGame ? '' : 'leaderboard__body_top-players'}`}>\n        {returnSortedArr().map(({\n          id, nickname, time,\n        }) => (\n          <div\n            key={id}\n            className={\n              `leaderboard__row ${(inGame && id === 'player') ? 'leaderboard__row_player' : ''}`\n            }\n          >\n            <div className={`leaderboard__col ${(inGame && id === 'player' && time === 0) ? 'leaderboard__col_no-counter' : ''}`} />\n            <div className=\"leaderboard__col\">{nickname}</div>\n            <div className=\"leaderboard__col leaderboard__col_text_right\">\n              {returnGameTime(time)}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Leaderboard;\n","import Leaderboard from './Leaderboard';\n\nexport default Leaderboard;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport './Loader.scss';\nimport { getMillisecondsFromGameTime } from '../../utils/helpers';\n\nfunction Loader() {\n  const game = useSelector((state) => state.game);\n  const { time } = game;\n  const [percent, setPercent] = useState(0);\n  useEffect(() => {\n    const fullTime = getMillisecondsFromGameTime(2, 20);\n    setPercent(100 / (fullTime / time));\n  }, [time]);\n\n  return (\n    <div className=\"loader\">\n      <div\n        className=\"loader__line loader__countdown\"\n        style={{ width: `${percent}%` }}\n      />\n    </div>\n  );\n}\n\nexport default Loader;\n","import androidImage from '../assets/img/card-images/android.svg';\nimport acerImage from '../assets/img/card-images/acer.svg';\nimport appleImage from '../assets/img/card-images/apple.svg';\nimport beatsImage from '../assets/img/card-images/beats.svg';\nimport hpImage from '../assets/img/card-images/hp.svg';\nimport lenovoImage from '../assets/img/card-images/lenovo.svg';\nimport nokiaImage from '../assets/img/card-images/nokia.svg';\nimport intelImage from '../assets/img/card-images/intel.svg';\nimport dellImage from '../assets/img/card-images/dell.svg';\nimport ciscoImage from '../assets/img/card-images/cisco.svg';\nimport htcImage from '../assets/img/card-images/htc.svg';\n\nconst gameCardImages = {\n  android: androidImage,\n  acer: acerImage,\n  apple: appleImage,\n  beats: beatsImage,\n  hp: hpImage,\n  lenovo: lenovoImage,\n  nokia: nokiaImage,\n  intel: intelImage,\n  dell: dellImage,\n  cisco: ciscoImage,\n  htc: htcImage,\n};\n\nexport default gameCardImages;\n","export default __webpack_public_path__ + \"static/media/android.5cea2350.svg\";","export default __webpack_public_path__ + \"static/media/acer.97b43230.svg\";","export default __webpack_public_path__ + \"static/media/apple.e8c87215.svg\";","export default __webpack_public_path__ + \"static/media/beats.338456d2.svg\";","export default __webpack_public_path__ + \"static/media/hp.2435474a.svg\";","export default __webpack_public_path__ + \"static/media/lenovo.025f4804.svg\";","export default __webpack_public_path__ + \"static/media/nokia.4daa5df2.svg\";","export default __webpack_public_path__ + \"static/media/intel.e6451727.svg\";","export default __webpack_public_path__ + \"static/media/dell.39467c58.svg\";","export default __webpack_public_path__ + \"static/media/cisco.20318700.svg\";","export default __webpack_public_path__ + \"static/media/htc.74cbfad7.svg\";","import React from 'react';\nimport './GameCard.scss';\nimport gameCardImages from '../../utils/gameCardImages';\n\nfunction GameCard({ card, index }) {\n  const {\n    isFlipped, name,\n  } = card;\n\n  return (\n    <div id={`card-${index}`} className={`card${isFlipped ? ' card_flipped' : ''}`}>\n      <div className=\"card__shirt\" />\n      <div className=\"card__face\" style={{ backgroundImage: `url(${gameCardImages[name]})` }} />\n      <div className=\"card__shadow\" />\n    </div>\n  );\n}\n\nexport default GameCard;\n","import GameCard from './GameCard';\n\nexport default GameCard;\n","export const PUSH_DATA_CARDS = 'cards/pushData';\nexport const ADD_TO_COMPARE_CARDS = 'cards/addToCompare';\nexport const FLIP_CARD = 'cards/flipCard';\n","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './Playground.scss';\nimport GameCard from '../GameCard';\nimport { flipCard } from '../../store/cards/cardsActions';\n\nfunction Playground({ level }) {\n  const cards = useSelector((state) => state.cards);\n  const grid = useRef(null);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const { current } = grid;\n\n    const clickHandler = ({ target }) => {\n      const card = target.closest('.card');\n      if (!card) return;\n\n      const cardId = card.id.split('-')[1];\n\n      dispatch(flipCard(cardId));\n    };\n\n    current.addEventListener('click', clickHandler);\n\n    return () => current.removeEventListener('click', clickHandler);\n  }, [dispatch]);\n\n  return (\n    <div className={`playground playground__level_${level}`} ref={grid}>\n      {cards.list.map((card, index) => <GameCard key={card.id} index={index} card={card} />)}\n    </div>\n  );\n}\n\nexport default Playground;\n","import Playground from './Playground';\n\nexport default Playground;\n","import {\n  FLIP_CARD,\n} from './cardsTypes';\n\nconst flipCard = (index) => {\n  const updateArr = (arr) => {\n    const copiedArr = [...arr];\n\n    copiedArr[index].isFlipped = !copiedArr[index].isFlipped;\n\n    return copiedArr;\n  };\n\n  return {\n    type: FLIP_CARD,\n    payload: updateArr,\n  };\n};\n\nconst a = null;\n\nexport { a, flipCard };\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '../../components/Button';\nimport GameInfo from '../../components/GameInfo';\nimport Leaderboard from '../../components/Leaderboard';\nimport Loader from '../../components/Loader/Loader';\nimport Playground from '../../components/Playground';\nimport { PAUSE_GAME, START_GAME } from '../../store/game/gameTypes';\nimport { SET_NICK_PLAYER } from '../../store/player/playerTypes';\nimport './Gamepage.scss';\n\nfunction Gamepage() {\n  const gamemode = useSelector((state) => state.gamemode);\n  const dispatch = useDispatch();\n  const [isPlay, setPlay] = useState(false);\n\n  useEffect(() => {\n    dispatch({ type: isPlay ? START_GAME : PAUSE_GAME });\n    dispatch({ type: SET_NICK_PLAYER, payload: 'Sergey' });\n  }, [dispatch, isPlay]);\n\n  console.log('render');\n  return (\n    <div className=\"game\">\n      <div className=\"game__interface\">\n        <GameInfo />\n        <div className=\"game__leaderboard\">\n          <Leaderboard inGame />\n        </div>\n        <div className=\"game__button\">\n          <Button variant=\"danger\" clickHandler={() => setPlay(!isPlay)}>Surrender</Button>\n        </div>\n      </div>\n      <div className=\"game__playground\">\n        <Playground\n          level={gamemode}\n        />\n      </div>\n      <div className=\"game__loader\">\n        <Loader width=\"50\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Gamepage;\n","import Gamepage from './Gamepage';\n\nexport default Gamepage;\n","import easyImage from '../assets/img/gamemode-images/easy.svg';\nimport mediumImage from '../assets/img/gamemode-images/medium.svg';\nimport hardImage from '../assets/img/gamemode-images/hard.svg';\n\nconst gameLevelData = {\n  easy: {\n    img: easyImage,\n    time: [1, 0],\n    layout: '4x4',\n    remeberTime: [0, 10],\n  },\n  medium: {\n    img: mediumImage,\n    time: [2, 20],\n    layout: '8x8',\n    remeberTime: [0, 30],\n  },\n  hard: {\n    img: hardImage,\n    time: [3, 50],\n    layout: '14x10',\n    remeberTime: [0, 50],\n  },\n};\n\nexport default gameLevelData;\n","export default __webpack_public_path__ + \"static/media/easy.448b1a60.svg\";","export default __webpack_public_path__ + \"static/media/medium.57b2e366.svg\";","export default __webpack_public_path__ + \"static/media/hard.b4764cca.svg\";","import React, { useEffect, useState } from 'react';\nimport './GameLevelCard.scss';\n\nimport gameLevelData from '../../utils/gameLevelData';\nimport Button from '../Button';\n\nfunction GameLevelCard({ level, active, onActive }) {\n  const [cardData, setCardData] = useState({});\n\n  useEffect(() => {\n    setCardData({ ...gameLevelData[level] });\n  }, [level, setCardData]);\n\n  return (\n    <div className=\"gamelevel\">\n      <div className=\"gamelevel__image_wrapp\">\n        <img\n          className={`gamelevel__image${active ? ' gamelevel__image_active' : ''}`}\n          src={cardData.img}\n          alt={level}\n        />\n      </div>\n      <div className=\"gamelevel__info_wrapp\">\n        <h3 className=\"gamelevel__info\">\n          <span className=\"gamelevel__name\">{level}</span>\n          <span className=\"gamelevel__time\">{cardData.time}</span>\n        </h3>\n      </div>\n      <div className=\"gamelevel__button_wrapp\">\n        <Button\n          isCheckbox\n          variant=\"primary\"\n          checked={active}\n          clickHandler={() => onActive(level)}\n        >\n          {cardData.layout}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameLevelCard;\n","import GameLevelCard from './GameLevelCard';\n\nexport default GameLevelCard;\n","const GAMEMODE_CHANGE = 'gamemode/change';\n\nexport default GAMEMODE_CHANGE;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Leaderboard from '../../components/Leaderboard';\nimport GameLevelCard from '../../components/GameLevelCard';\nimport Button from '../../components/Button';\nimport './Homepage.scss';\nimport GAMEMODE_CHANGE from '../../store/gamemode/gamemodeTypes';\n\nfunction Homepage() {\n  const leaderboard = useSelector((state) => state.leaderboard);\n  const gamemode = useSelector((state) => state.gamemode);\n  const dispatch = useDispatch();\n\n  const selectLevel = useCallback((level) => {\n    dispatch({\n      type: GAMEMODE_CHANGE,\n      payload: level,\n    });\n  }, [dispatch]);\n\n  return (\n    <div className=\"homepage\">\n      <div className=\"homepage__leaderboard-wrapper\">\n        <h1 className=\"homepage__title\">Leaderboard</h1>\n        <Leaderboard leaders={leaderboard.list} />\n      </div>\n      <h3 className=\"homepage__subtitle\">Select the grid size</h3>\n      <div className=\"homepage__level-wrapper\">\n        <GameLevelCard\n          level=\"easy\"\n          active={gamemode === 'easy'}\n          onActive={selectLevel}\n        />\n        <GameLevelCard\n          level=\"medium\"\n          active={gamemode === 'medium'}\n          onActive={selectLevel}\n        />\n        <GameLevelCard\n          level=\"hard\"\n          active={gamemode === 'hard'}\n          onActive={selectLevel}\n        />\n      </div>\n      <div className=\"homepage__button-wrapper\">\n        <Button variant=\"large\">Play</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Homepage;\n","import Homepage from './Homepage';\n\nexport default Homepage;\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport Gamepage from './pages/Gamepage';\nimport Homepage from './pages/Homepage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\">\n            <Homepage />\n          </Route>\n          <Route exact path=\"/game\">\n            <Gamepage />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","export const LOADING_LEADERBOARD = 'leaderboard/loading';\nexport const LOADED_LEADERBOARD = 'leaderboard/loaded';\nexport const ERROR_LEADERBOARD = 'leaderboard/error';\nexport const CLEAR_ERROR_LEADERBOARD = 'leaderboard/clearError';\nexport const PUSH_DATA_LEADERBOARD = 'leaderboard/pushData';\n","import {\n  LOADING_LEADERBOARD,\n  LOADED_LEADERBOARD,\n  ERROR_LEADERBOARD,\n  CLEAR_ERROR_LEADERBOARD,\n  PUSH_DATA_LEADERBOARD,\n} from './leaderboardTypes';\n\nconst initialState = {\n  list: [...new Array(50)].map((e, i) => ({\n    id: i,\n    nickname: `Username ${i}`,\n    time: 3000 + (i * 1000),\n  })),\n  isLoading: false,\n  isLoaded: false,\n  isError: false,\n  errorMessage: null,\n};\n\nfunction leaderboardReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOADING_LEADERBOARD:\n      return {\n        ...state,\n        isLoading: true,\n        isLoaded: false,\n      };\n    case LOADED_LEADERBOARD:\n      return {\n        ...state,\n        isLoading: false,\n        isLoaded: true,\n      };\n    case ERROR_LEADERBOARD:\n      return {\n        ...state,\n        isError: true,\n        errorMessage: action.payload,\n      };\n    case CLEAR_ERROR_LEADERBOARD:\n      return {\n        ...state,\n        isError: false,\n        errorMessage: null,\n      };\n    case PUSH_DATA_LEADERBOARD:\n      return {\n        ...state,\n        list: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default leaderboardReducer;\n","import GAMEMODE_CHANGE from './gamemodeTypes';\n\nfunction gamemodeReducer(state = 'easy', action) {\n  switch (action.type) {\n    case GAMEMODE_CHANGE:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nexport default gamemodeReducer;\n","import {\n  PUSH_DATA_CARDS,\n  ADD_TO_COMPARE_CARDS,\n  FLIP_CARD,\n} from './cardsTypes';\n\nconst initialState = {\n  compare: [],\n  list: [...new Array(16)].map((el, i) => ({\n    id: i,\n    name: 'apple',\n    isFlipped: false,\n  })),\n};\n\nfunction cardsReducer(state = initialState, action) {\n  switch (action.type) {\n    case PUSH_DATA_CARDS:\n      return {\n        ...state,\n        list: action.payload,\n      };\n    case FLIP_CARD:\n      return {\n        ...state,\n        list: action.payload(state.list),\n      };\n    case ADD_TO_COMPARE_CARDS:\n      return {\n        ...state,\n        compare: [...action.payload(state.compare)],\n      };\n    default:\n      return state;\n  }\n}\n\nexport default cardsReducer;\n","import {\n  SET_NICK_PLAYER,\n  SET_TIME_PLAYER,\n  CLEAR_TIME_PLAYER,\n} from './playerTypes';\n\nconst initialState = {\n  nickname: null,\n  time: null,\n};\n\nfunction playerReducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_NICK_PLAYER:\n      return {\n        ...state,\n        nickname: action.payload,\n      };\n    case SET_TIME_PLAYER:\n      return {\n        ...state,\n        time: action.payload,\n      };\n    case CLEAR_TIME_PLAYER:\n      return {\n        ...state,\n        time: null,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default playerReducer;\n","import {\n  START_GAME,\n  PAUSE_GAME,\n  END_GAME,\n  SET_TIME_GAME,\n} from './gameTypes';\n\nconst initialState = {\n  isPlaying: false,\n  isPause: false,\n  isGameOver: false,\n  time: null,\n};\n\nfunction gameReducer(state = initialState, { type, payload }) {\n  switch (type) {\n    case START_GAME:\n      return {\n        ...state,\n        isPlaying: true,\n        isPause: false,\n      };\n\n    case PAUSE_GAME:\n      return {\n        ...state,\n        isPlaying: false,\n        isPause: true,\n      };\n\n    case END_GAME:\n      return {\n        ...state,\n        isGameOver: true,\n        isPlaying: false,\n      };\n\n    case SET_TIME_GAME:\n      return {\n        ...state,\n        time: payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default gameReducer;\n","import { combineReducers } from 'redux';\nimport leaderboardReducer from './leaderboard/leaderboardReducer';\nimport gamemodeReducer from './gamemode/gamemodeReducer';\nimport cardsReducer from './cards/cardsReducer';\nimport playerReducer from './player/playerReducer';\nimport gameReducer from './game/gameReducer';\n\nconst rootReducer = combineReducers({\n  player: playerReducer,\n  gamemode: gamemodeReducer,\n  leaderboard: leaderboardReducer,\n  cards: cardsReducer,\n  game: gameReducer,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from './rootReducer';\n\nconst store = createStore(\n  rootReducer,\n  // eslint-disable-next-line no-underscore-dangle\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/index.scss';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}